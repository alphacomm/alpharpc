<?php
/**
 * This file is part of AlphaRPC (http://alpharpc.net/)
 *
 * @license BSD-3 (please see the LICENSE file distributed with this source code.
 * @copyright Copyright (c) 2010-2013, Alphacomm Group B.V. (http://www.alphacomm.nl/)
 */

namespace AlphaRPC\Console\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;

class GenerateSupervisorConfig extends Command
{
    /**
     * Path where alpharpc is installed.
     *
     * @var string
     */
    protected $installPath;

    /**
     * Working directory. When running binaries you are expected to have this
     * directory active.
     *
     * @var string
     */
    protected $workingDirectory;

    public function __construct($workingDirectory = null, $installPath = null)
    {
        $this->workingDirectory = $workingDirectory ?: getcwd();
        if (!is_dir($this->workingDirectory)) {
            throw new \RuntimeException('Working directory does not exist.');
        }

        $this->installPath = $installPath ?: $this->getInstallPath();
        if (!is_dir($this->installPath)) {
            throw new \RuntimeException('Install path does not exist.');
        }

        parent::__construct('generate-supervisor-config');
    }

    public function configure()
    {
        try {
            $defaultPhpPath = $this->getPhpBinPath();
        } catch (\RuntimeException $ex) {
            $defaultPhpPath = null;
        }

        $defaultOutputFile = $this->workingDirectory.'/app/config/supervisord.ini';

        $this->getDefinition()
            ->addOption(new InputOption(
                'php-path', 'p', InputOption::VALUE_REQUIRED,
                'Path to php binary.', $defaultPhpPath));

        $this->getDefinition()
            ->addArgument(new InputArgument(
                'group', InputArgument::OPTIONAL,
                'Groupname to register in supervisor.', 'alpharpc'));

        $this->getDefinition()
            ->addOption(new InputOption(
                'output-file', 'o', InputOption::VALUE_REQUIRED,
                'Filename of the supervisor configuration.', $defaultOutputFile));
    }

    /**
     * {@inheritdoc}
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $group = $input->getArgument('group');

        $outputFile = $input->getOption('output-file');
        if (!$outputFile) {
            $outputFile = $this->workingDirectory.'/app/config/supervisord.ini';
        }

        $phpPath = $input->getOption('php-path');
        if (!$phpPath) {
            $output->writeln(array(
                '<error>Path to php binairy could not be found, use the -p option.</error>'
            ));
            exit;
        }

        $installPath = $this->installPath;
        $workingDirectory = $this->workingDirectory;

        $template = <<<TPL
; This file is autogenerated by alpharpc generate-supervisor-config
[program:{$group}_clienthandler]
command = $phpPath {$installPath}/bin/alpharpc-client-handler
autostart = true
autorestart = true
directory = {$workingDirectory}

[program:{$group}_workerhandler]
command = $phpPath {$installPath}/bin/alpharpc-worker-handler
autostart = true
autorestart = true
directory = {$workingDirectory}

[group:$group]
programs = {$group}_clienthandler, {$group}_workerhandler
TPL;

        if (!file_put_contents($outputFile, $template)) {
            throw new \RuntimeException('Unable to write to: '.$outputFile);
        }

        $output->writeln(array(
            '<info>generate-supervisor-config</info>',
            'Generated supervisor config at:',
            $outputFile,
            '',
            '<comment>Do not forget to add it to your supervisor instance.</comment>',
            'On debian machines you should run (as root):',
            'ln -s '.$outputFile.' /etc/supervisor/conf.d/'.$group.'.conf && supervisorctl update'
        ));
    }

    public function getPhpBinPath()
    {
        $binPaths = explode(PATH_SEPARATOR, $_SERVER['PATH']);
        foreach ($binPaths as $binPath) {
            if (file_exists($binPath.'/php')) {
                $phpPath = $binPath.'/php';
                break;
            }
        }
        if ($phpPath === null) {
            throw new \RuntimeException('PHP binary could not be found.');
        }

        return $phpPath;
    }

    private function getInstallPath()
    {
        $pos = strrpos(__DIR__, '/src/');
        if ($pos === false) {
            throw new \RuntimeException('Install path could not be located.');
        }

        return substr(__DIR__, 0, $pos);
    }
}
